
1. 线程分为两类: 守护线程和非守护线程，默认开的都是非守护线程，Java规定当所有非守护线程退出后，整个JVM进程就会退出，也就是说守护线程“不算作数”，
      守护线程不影响JVN的退出。  垃圾回收线程就是守护线程.

2.synchronized关键字：(本质是给某个对象加了把锁)
        1.作用在非静态成员函数(方法)中: 给new 出来的对象加了把锁   比如A类中有一个非静态成员函数加了synchronized关键字，那么 A a= new A();
          synchronized锁的是a;
        2.作用在静态成员函数(方法)中: 比如A类中有一个静态成员函数加了synchronized关键字,那么synchronized锁的是A.class;


问题：一个静态成员函数和一个非静态成员变量都加了synchronized关键字，分别被两个线程调用，锁是否互斥？  答案： 否，因为是两把不同的锁，不存在互斥

3.轻量级阻塞和重量级阻塞：
    能够被中断的阻塞称为轻量级阻塞，对应线程的状态是WAITING或者TIME_WAITING； 像synchronized这种不能被中断的阻塞叫重量级阻塞。对应状态是
    BLOCKED.
    不太常见的阻塞函数和唤醒函数： LockSupport.park()/unpark()
    t.interrupted()的精确含义： “唤醒轻量级阻塞”

4.t.isInterrupted()与Thread.interrupted()的区别
    这两个函数都是线程 用来判断自己是否收到过中断信号的，前者是非静态函数，后者是静态函数。区别在于,前者只是读取中断状态，不修改状态；后者不仅
    读取状态，还会重置中断标志位。